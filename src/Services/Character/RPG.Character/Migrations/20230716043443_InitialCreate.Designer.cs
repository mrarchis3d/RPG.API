// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPG.Character.Infrastructure;

#nullable disable

namespace RPG.Character.Migrations
{
    [DbContext(typeof(ServiceDbContext))]
    [Migration("20230716043443_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.BaseAttributes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClassTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Concentration")
                        .HasColumnType("int");

                    b.Property<int>("CriticRatePercentage")
                        .HasColumnType("int");

                    b.Property<int>("DodgePercentage")
                        .HasColumnType("int");

                    b.Property<int>("MagicalArmor")
                        .HasColumnType("int");

                    b.Property<int>("MagicalDamageHigh")
                        .HasColumnType("int");

                    b.Property<int>("MagicalDamageLow")
                        .HasColumnType("int");

                    b.Property<int>("PhisycalDamageHigh")
                        .HasColumnType("int");

                    b.Property<int>("PhisycalDamageLow")
                        .HasColumnType("int");

                    b.Property<Guid?>("RaceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.HasIndex("RaceTypeId");

                    b.ToTable("BaseAttributes", (string)null);
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.Character", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfessionExperience")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("ClassTypeId")
                        .IsUnique();

                    b.HasIndex("RaceTypeId")
                        .IsUnique();

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.ClassType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClassTypes", (string)null);
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.RaceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1250)
                        .HasColumnType("nvarchar(1250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RaceTypes", (string)null);
                });

            modelBuilder.Entity("RPG.Character.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.BaseAttributes", b =>
                {
                    b.HasOne("RPG.Character.Domain.CharacterAggregate.ClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId");

                    b.HasOne("RPG.Character.Domain.CharacterAggregate.RaceType", "RaceType")
                        .WithMany()
                        .HasForeignKey("RaceTypeId");

                    b.Navigation("ClassType");

                    b.Navigation("RaceType");
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.Character", b =>
                {
                    b.HasOne("RPG.Character.Domain.CharacterAggregate.ClassType", "ClassType")
                        .WithOne("Character")
                        .HasForeignKey("RPG.Character.Domain.CharacterAggregate.Character", "ClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPG.Character.Domain.CharacterAggregate.RaceType", "RaceType")
                        .WithOne("Character")
                        .HasForeignKey("RPG.Character.Domain.CharacterAggregate.Character", "RaceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPG.Character.Domain.UserAggregate.User", "User")
                        .WithOne("Character")
                        .HasForeignKey("RPG.Character.Domain.CharacterAggregate.Character", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassType");

                    b.Navigation("RaceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.ClassType", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });

            modelBuilder.Entity("RPG.Character.Domain.CharacterAggregate.RaceType", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });

            modelBuilder.Entity("RPG.Character.Domain.UserAggregate.User", b =>
                {
                    b.Navigation("Character")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
